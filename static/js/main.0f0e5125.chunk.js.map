{"version":3,"sources":["serviceWorker.js","Others/OvermindHelper.js","Components/CounterDemo.js","Others/Theme.js","index.js"],"names":["Boolean","window","location","hostname","match","useOvermind","createHook","overmind","createOvermind","state","counter","actions","increase","number","useStyles","require","FayFetch","makeStyles","theme","CounterDemo","useEffect","Grid","style","padding","container","direction","justify","alignItems","alignContent","Typography","Button","margin","color","variant","onClick","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","ReactDOM","render","StrictMode","value","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCZOC,EAAcC,cACdC,EAAWC,YAAe,CACnCC,MAAO,CACHC,QAAS,GAEbC,QAAS,CACLC,SADK,WACaC,GAAQ,EAAhBJ,MACAC,SAAWG,M,gCCLvBC,GAFaC,EAAQ,IAApBC,SAEWC,aAAW,SAACC,GAAD,MAAY,OA+B1BC,EA3BK,WAAO,IAAD,EACGd,IAAlBI,EADe,EACfA,MAAOE,EADQ,EACRA,QACEG,IAQhB,OANAM,qBAAU,cAIP,IAGC,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,QAAS,IAAKC,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,SAC/EC,aAAa,UACf,kBAACC,EAAA,EAAD,KAAapB,EAAMC,SACnB,kBAACW,EAAA,EAAD,CAAMG,WAAS,EAACC,UAAU,MAAME,WAAW,SAASC,aAAa,SAASF,QAAQ,UAC9E,kBAACI,EAAA,EAAD,CAAQR,MAAO,CAACS,OAAQ,GAAIC,MAAM,UAAUC,QAAQ,YAAYC,QAAS,WACrEvB,EAAQC,SAAS,KADrB,KAGA,kBAACkB,EAAA,EAAD,CAAQR,MAAO,CAACS,OAAQ,GAAIC,MAAM,UAAUC,QAAQ,YAAYC,QAAS,WACrEvB,EAAQC,UAAU,KADtB,Q,wBC1BHM,EAAQiB,YAAe,CAChCC,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,WAEVE,MAAO,CACHF,KAAMG,IAAIC,MAEdC,WAAY,CACRC,QAAS,WCNrBC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUC,MAAOzC,GACb,kBAAC0C,EAAA,EAAD,CAAe/B,MAAOA,GAClB,kBAAC,EAAD,SAIZgC,SAASC,eAAe,SJiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlB,GACLmB,QAAQnB,MAAMA,EAAMoB,c","file":"static/js/main.0f0e5125.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// npm install overmind overmind-react\r\n// yarn add overmind overmind-react\r\n\r\nimport {createOvermind} from \"overmind\";\r\nimport {createHook} from \"overmind-react\";\r\n\r\nexport const useOvermind = createHook();\r\nexport const overmind = createOvermind({\r\n    state: {\r\n        counter: 0\r\n    },\r\n    actions: {\r\n        increase({state}, number) {\r\n            state.counter += number\r\n        },\r\n    }\r\n});\r\n","import React, {useState, useEffect} from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {useOvermind} from \"../Others/OvermindHelper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nconst {FayFetch} = require('fayfetch')\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    //\r\n}))\r\n\r\nconst CounterDemo = () => {\r\n    const {state, actions} = useOvermind()\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        // FayFetch.get('https://api.npoint.io/6db6479a282d181d7ceb', null, null, (status, data, ok) => {\r\n        //     console.log(\"OK: \" + ok)\r\n        // })\r\n    }, [])\r\n\r\n    return (\r\n        <Grid style={{padding: 48}} container direction='column' justify='center' alignItems='center'\r\n              alignContent='center'>\r\n            <Typography>{state.counter}</Typography>\r\n            <Grid container direction='row' alignItems='center' alignContent='center' justify='center'>\r\n                <Button style={{margin: 8}} color='primary' variant='contained' onClick={() => {\r\n                    actions.increase(1)\r\n                }}>+</Button>\r\n                <Button style={{margin: 8}} color='primary' variant='contained' onClick={() => {\r\n                    actions.increase(-1)\r\n                }}>-</Button>\r\n            </Grid>\r\n\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CounterDemo;\r\n","import {createMuiTheme} from '@material-ui/core/styles';\r\nimport {red} from '@material-ui/core/colors';\r\n\r\n// Create a theme instance.\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#556cd6',\r\n        },\r\n        secondary: {\r\n            main: '#19857b',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n        background: {\r\n            default: '#fff',\r\n        },\r\n    },\r\n});\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"overmind-react\";\r\nimport {overmind} from './Others/OvermindHelper'\r\nimport CounterDemo from \"./Components/CounterDemo\";\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport {theme} from './Others/Theme'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider value={overmind}>\r\n            <ThemeProvider theme={theme}>\r\n                <CounterDemo/>\r\n            </ThemeProvider>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}